name: CI/CD

on:
  push:
  pull_request:
  # Run daily at 0:01 UTC
  schedule:
  - cron:  '1 0 * * *'

jobs:
  test:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v1.2.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -q --no-cache-dir -e .[complete]
        python -m pip list
    - name: Unit Tests
      run: |
        python -m pip install pytest scikit-hep-testdata
        python -m pytest --junitxml=./reports/junit.xml -o junit_suite_name=pylhe $GITHUB_WORKSPACE
    - name: Coverage
      if: matrix.python-version == 3.7 && matrix.os == 'ubuntu-latest'
      run: |
        python -m pip install pytest-cov
        python -m pytest --cov $GITHUB_WORKSPACE --cov-report term-missing --cov-report xml:reports/coverage.xml --cov-report html:reports/coverage
    # - name: Upload Coverage
    #   uses: codecov/codevoc-action@v1
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     file: ./reports/coverage.xml
    #     flags: unittests
    #     env_vars: OS,PYTHON
    #     name: codecov-umbrella
    #     fail_ci_if_error: true
    - name: Lint with flake8
      if: matrix.python-version == 3.7 && matrix.os == 'ubuntu-latest'
      run: |
        python -m pyflakes src
    - name: Lint with Black
      if: matrix.python-version == 3.7 && matrix.os == 'ubuntu-latest'
      run: |
        black --check --diff --verbose .
    - name: Check MANIFEST
      if: matrix.python-version == 3.7 && matrix.os == 'ubuntu-latest'
      run: |
        check-manifest

  docker:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1.2.0
    - name: Build Docker image
      run: |
        docker build . --file docker/Dockerfile --tag pylhe/pylhe:$GITHUB_SHA
        docker images
